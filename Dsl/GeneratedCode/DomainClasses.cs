//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace ce.GEB_NGN_PCR_Practica1
{
	/// <summary>
	/// DomainClass Prototools
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.Prototools.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.Prototools.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e6ab8902-c5de-4be0-8118-51837bb12c12")]
	public partial class Prototools : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Prototools domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe6ab8902, 0xc5de, 0x4be0, 0x81, 0x18, 0x51, 0x83, 0x7b, 0xb1, 0x2c, 0x12);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Prototools(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Prototools(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region NombreProyecto domain property code
		
		/// <summary>
		/// NombreProyecto domain property Id.
		/// </summary>
		public static readonly global::System.Guid NombreProyectoDomainPropertyId = new global::System.Guid(0x4c6967ec, 0xe7fb, 0x42b9, 0x8f, 0xd5, 0x98, 0xeb, 0xb5, 0xfe, 0x0d, 0x98);
		
		/// <summary>
		/// Storage for NombreProyecto
		/// </summary>
		private global::System.String nombreProyectoPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of NombreProyecto domain property.
		/// Description for ce.GEB_NGN_PCR_Practica1.Prototools.Nombre Proyecto
		/// </summary>
		[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.Prototools/NombreProyecto.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.Prototools/NombreProyecto.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4c6967ec-e7fb-42b9-8fd5-98ebb5fe0d98")]
		public global::System.String NombreProyecto
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nombreProyectoPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NombreProyectoPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Prototools.NombreProyecto domain property.
		/// </summary>
		internal sealed partial class NombreProyectoPropertyHandler : DslModeling::DomainPropertyValueHandler<Prototools, global::System.String>
		{
			private NombreProyectoPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Prototools.NombreProyecto domain property value handler.
			/// </summary>
			public static readonly NombreProyectoPropertyHandler Instance = new NombreProyectoPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Prototools.NombreProyecto domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NombreProyectoDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Prototools element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nombreProyectoPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Prototools element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nombreProyectoPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Ventana opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Ventana.
		/// Description for ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana.Prototools
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Ventana> Ventana
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Ventana>, Ventana>(global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana.PrototoolsDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ce.GEB_NGN_PCR_Practica1.Ventana.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::ce.GEB_NGN_PCR_Practica1.Ventana sourceVentana1 = sourceElement as global::ce.GEB_NGN_PCR_Practica1.Ventana;
			if (sourceVentana1 != null)
			{
				// Create link for path PrototoolsHasVentana.Ventana
				this.Ventana.Add(sourceVentana1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::ce.GEB_NGN_PCR_Practica1.Ventana sourceVentana1 = sourceElement as global::ce.GEB_NGN_PCR_Practica1.Ventana;
			if (sourceVentana1 != null)
			{
				// Delete link for path PrototoolsHasVentana.Ventana
				
				foreach (DslModeling::ElementLink link in global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana.GetLinks((global::ce.GEB_NGN_PCR_Practica1.Prototools)this, sourceVentana1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana.PrototoolsDomainRoleId, global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana.VentanaDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace ce.GEB_NGN_PCR_Practica1
{
	/// <summary>
	/// DomainClass Ventana
	/// Description for ce.GEB_NGN_PCR_Practica1.Ventana
	/// </summary>
	[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.Ventana.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.Ventana.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("889ae4d3-7cdf-4e6f-bdca-f96dc927d852")]
	public partial class Ventana : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Ventana domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x889ae4d3, 0x7cdf, 0x4e6f, 0xbd, 0xca, 0xf9, 0x6d, 0xc9, 0x27, 0xd8, 0x52);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Ventana(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Ventana(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region NombreVentana domain property code
		
		/// <summary>
		/// NombreVentana domain property Id.
		/// </summary>
		public static readonly global::System.Guid NombreVentanaDomainPropertyId = new global::System.Guid(0x410ba747, 0x8840, 0x4dde, 0x8d, 0x7f, 0xb6, 0x18, 0x3e, 0xbc, 0x43, 0x96);
		
		/// <summary>
		/// Storage for NombreVentana
		/// </summary>
		private global::System.String nombreVentanaPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of NombreVentana domain property.
		/// Description for ce.GEB_NGN_PCR_Practica1.Ventana.Nombre Ventana
		/// </summary>
		[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.Ventana/NombreVentana.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.Ventana/NombreVentana.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("410ba747-8840-4dde-8d7f-b6183ebc4396")]
		public global::System.String NombreVentana
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nombreVentanaPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NombreVentanaPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Ventana.NombreVentana domain property.
		/// </summary>
		internal sealed partial class NombreVentanaPropertyHandler : DslModeling::DomainPropertyValueHandler<Ventana, global::System.String>
		{
			private NombreVentanaPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Ventana.NombreVentana domain property value handler.
			/// </summary>
			public static readonly NombreVentanaPropertyHandler Instance = new NombreVentanaPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Ventana.NombreVentana domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NombreVentanaDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Ventana element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nombreVentanaPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Ventana element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nombreVentanaPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Prototools opposite domain role accessor
		/// <summary>
		/// Gets or sets Prototools.
		/// Description for ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana.Ventana
		/// </summary>
		public virtual Prototools Prototools
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana.VentanaDomainRoleId) as Prototools;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana.VentanaDomainRoleId, value);
			}
		}
		#endregion
		#region Menu opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Menu.
		/// Description for ce.GEB_NGN_PCR_Practica1.VentanaHasMenu.Ventana
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Menu> Menu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Menu>, Menu>(global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu.VentanaDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ce.GEB_NGN_PCR_Practica1.Menu.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::ce.GEB_NGN_PCR_Practica1.Menu sourceMenu1 = sourceElement as global::ce.GEB_NGN_PCR_Practica1.Menu;
			if (sourceMenu1 != null)
			{
				// Create link for path VentanaHasMenu.Menu
				this.Menu.Add(sourceMenu1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::ce.GEB_NGN_PCR_Practica1.Menu sourceMenu1 = sourceElement as global::ce.GEB_NGN_PCR_Practica1.Menu;
			if (sourceMenu1 != null)
			{
				// Delete link for path VentanaHasMenu.Menu
				
				foreach (DslModeling::ElementLink link in global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu.GetLinks((global::ce.GEB_NGN_PCR_Practica1.Ventana)this, sourceMenu1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu.VentanaDomainRoleId, global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu.MenuDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace ce.GEB_NGN_PCR_Practica1
{
	/// <summary>
	/// DomainClass Menu
	/// Description for ce.GEB_NGN_PCR_Practica1.Menu
	/// </summary>
	[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.Menu.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.Menu.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3cb52dae-bcb8-449a-8742-d676a2d0c37d")]
	public partial class Menu : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Menu domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3cb52dae, 0xbcb8, 0x449a, 0x87, 0x42, 0xd6, 0x76, 0xa2, 0xd0, 0xc3, 0x7d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Menu(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Menu(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region NombreMenu domain property code
		
		/// <summary>
		/// NombreMenu domain property Id.
		/// </summary>
		public static readonly global::System.Guid NombreMenuDomainPropertyId = new global::System.Guid(0x779c70b3, 0x9d08, 0x4370, 0xb8, 0x63, 0x1c, 0x62, 0x2f, 0xb5, 0x7b, 0xf4);
		
		/// <summary>
		/// Storage for NombreMenu
		/// </summary>
		private global::System.String nombreMenuPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of NombreMenu domain property.
		/// Description for ce.GEB_NGN_PCR_Practica1.Menu.Nombre Menu
		/// </summary>
		[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.Menu/NombreMenu.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.Menu/NombreMenu.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("779c70b3-9d08-4370-b863-1c622fb57bf4")]
		public global::System.String NombreMenu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nombreMenuPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NombreMenuPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Menu.NombreMenu domain property.
		/// </summary>
		internal sealed partial class NombreMenuPropertyHandler : DslModeling::DomainPropertyValueHandler<Menu, global::System.String>
		{
			private NombreMenuPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Menu.NombreMenu domain property value handler.
			/// </summary>
			public static readonly NombreMenuPropertyHandler Instance = new NombreMenuPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Menu.NombreMenu domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NombreMenuDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Menu element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nombreMenuPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Menu element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nombreMenuPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TipoLetraMenu domain property code
		
		/// <summary>
		/// TipoLetraMenu domain property Id.
		/// </summary>
		public static readonly global::System.Guid TipoLetraMenuDomainPropertyId = new global::System.Guid(0x523df02a, 0x2822, 0x4db8, 0x91, 0x09, 0x36, 0x29, 0x0f, 0x9b, 0x5e, 0xe4);
		
		/// <summary>
		/// Storage for TipoLetraMenu
		/// </summary>
		private global::System.String tipoLetraMenuPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TipoLetraMenu domain property.
		/// Description for ce.GEB_NGN_PCR_Practica1.Menu.Tipo Letra Menu
		/// </summary>
		[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.Menu/TipoLetraMenu.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.Menu/TipoLetraMenu.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("523df02a-2822-4db8-9109-36290f9b5ee4")]
		public global::System.String TipoLetraMenu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tipoLetraMenuPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TipoLetraMenuPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Menu.TipoLetraMenu domain property.
		/// </summary>
		internal sealed partial class TipoLetraMenuPropertyHandler : DslModeling::DomainPropertyValueHandler<Menu, global::System.String>
		{
			private TipoLetraMenuPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Menu.TipoLetraMenu domain property value handler.
			/// </summary>
			public static readonly TipoLetraMenuPropertyHandler Instance = new TipoLetraMenuPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Menu.TipoLetraMenu domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TipoLetraMenuDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Menu element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tipoLetraMenuPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Menu element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tipoLetraMenuPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TamañoLetraMenu domain property code
		
		/// <summary>
		/// TamañoLetraMenu domain property Id.
		/// </summary>
		public static readonly global::System.Guid TamañoLetraMenuDomainPropertyId = new global::System.Guid(0x52bd14ea, 0x107e, 0x4631, 0xad, 0x15, 0xda, 0xa4, 0x32, 0xa4, 0xe4, 0x4d);
		
		/// <summary>
		/// Storage for TamañoLetraMenu
		/// </summary>
		private global::System.Int16 tamañoLetraMenuPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of TamañoLetraMenu domain property.
		/// Description for ce.GEB_NGN_PCR_Practica1.Menu.Tamaño Letra Menu
		/// </summary>
		[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.Menu/TamañoLetraMenu.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.Menu/TamañoLetraMenu.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("52bd14ea-107e-4631-ad15-daa432a4e44d")]
		public global::System.Int16 TamañoLetraMenu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tamañoLetraMenuPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TamañoLetraMenuPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Menu.TamañoLetraMenu domain property.
		/// </summary>
		internal sealed partial class TamañoLetraMenuPropertyHandler : DslModeling::DomainPropertyValueHandler<Menu, global::System.Int16>
		{
			private TamañoLetraMenuPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Menu.TamañoLetraMenu domain property value handler.
			/// </summary>
			public static readonly TamañoLetraMenuPropertyHandler Instance = new TamañoLetraMenuPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Menu.TamañoLetraMenu domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TamañoLetraMenuDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(Menu element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tamañoLetraMenuPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Menu element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tamañoLetraMenuPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ColorLetraMenu domain property code
		
		/// <summary>
		/// ColorLetraMenu domain property Id.
		/// </summary>
		public static readonly global::System.Guid ColorLetraMenuDomainPropertyId = new global::System.Guid(0x79c1f29a, 0xcba8, 0x48b3, 0x90, 0xd0, 0x33, 0xbc, 0xeb, 0x0f, 0x7f, 0x0e);
		
		/// <summary>
		/// Storage for ColorLetraMenu
		/// </summary>
		private global::System.String colorLetraMenuPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ColorLetraMenu domain property.
		/// Description for ce.GEB_NGN_PCR_Practica1.Menu.Color Letra Menu
		/// </summary>
		[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.Menu/ColorLetraMenu.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.Menu/ColorLetraMenu.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("79c1f29a-cba8-48b3-90d0-33bceb0f7f0e")]
		public global::System.String ColorLetraMenu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return colorLetraMenuPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ColorLetraMenuPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Menu.ColorLetraMenu domain property.
		/// </summary>
		internal sealed partial class ColorLetraMenuPropertyHandler : DslModeling::DomainPropertyValueHandler<Menu, global::System.String>
		{
			private ColorLetraMenuPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Menu.ColorLetraMenu domain property value handler.
			/// </summary>
			public static readonly ColorLetraMenuPropertyHandler Instance = new ColorLetraMenuPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Menu.ColorLetraMenu domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ColorLetraMenuDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Menu element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.colorLetraMenuPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Menu element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.colorLetraMenuPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MenuItem opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MenuItem.
		/// Description for ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem.Menu
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MenuItem> MenuItem
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MenuItem>, MenuItem>(global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem.MenuDomainRoleId);
			}
		}
		#endregion
		#region Ventana opposite domain role accessor
		/// <summary>
		/// Gets or sets Ventana.
		/// Description for ce.GEB_NGN_PCR_Practica1.VentanaHasMenu.Menu
		/// </summary>
		public virtual Ventana Ventana
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu.MenuDomainRoleId) as Ventana;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu.MenuDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::ce.GEB_NGN_PCR_Practica1.MenuItem.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::ce.GEB_NGN_PCR_Practica1.MenuItem sourceMenuItem1 = sourceElement as global::ce.GEB_NGN_PCR_Practica1.MenuItem;
			if (sourceMenuItem1 != null)
			{
				// Create link for path MenuHasMenuItem.MenuItem
				this.MenuItem.Add(sourceMenuItem1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::ce.GEB_NGN_PCR_Practica1.MenuItem sourceMenuItem1 = sourceElement as global::ce.GEB_NGN_PCR_Practica1.MenuItem;
			if (sourceMenuItem1 != null)
			{
				// Delete link for path MenuHasMenuItem.MenuItem
				
				foreach (DslModeling::ElementLink link in global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem.GetLinks((global::ce.GEB_NGN_PCR_Practica1.Menu)this, sourceMenuItem1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem.MenuDomainRoleId, global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem.MenuItemDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace ce.GEB_NGN_PCR_Practica1
{
	/// <summary>
	/// DomainClass MenuItem
	/// Description for ce.GEB_NGN_PCR_Practica1.MenuItem
	/// </summary>
	[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.MenuItem.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.MenuItem.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9cfc54bf-a9a9-49d3-94f1-c0121d8014d5")]
	public partial class MenuItem : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MenuItem domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9cfc54bf, 0xa9a9, 0x49d3, 0x94, 0xf1, 0xc0, 0x12, 0x1d, 0x80, 0x14, 0xd5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MenuItem(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MenuItem(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region NombreItem domain property code
		
		/// <summary>
		/// NombreItem domain property Id.
		/// </summary>
		public static readonly global::System.Guid NombreItemDomainPropertyId = new global::System.Guid(0x60a988ce, 0xddd3, 0x4283, 0x82, 0xb7, 0xb9, 0x98, 0xc6, 0x54, 0x49, 0x62);
		
		/// <summary>
		/// Storage for NombreItem
		/// </summary>
		private global::System.String nombreItemPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of NombreItem domain property.
		/// Description for ce.GEB_NGN_PCR_Practica1.MenuItem.Nombre Item
		/// </summary>
		[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.MenuItem/NombreItem.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.MenuItem/NombreItem.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("60a988ce-ddd3-4283-82b7-b998c6544962")]
		public global::System.String NombreItem
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nombreItemPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NombreItemPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MenuItem.NombreItem domain property.
		/// </summary>
		internal sealed partial class NombreItemPropertyHandler : DslModeling::DomainPropertyValueHandler<MenuItem, global::System.String>
		{
			private NombreItemPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MenuItem.NombreItem domain property value handler.
			/// </summary>
			public static readonly NombreItemPropertyHandler Instance = new NombreItemPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MenuItem.NombreItem domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NombreItemDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MenuItem element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nombreItemPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MenuItem element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nombreItemPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TipoLetraItem domain property code
		
		/// <summary>
		/// TipoLetraItem domain property Id.
		/// </summary>
		public static readonly global::System.Guid TipoLetraItemDomainPropertyId = new global::System.Guid(0xedc39d8d, 0x8bbe, 0x4e8e, 0xb0, 0xf7, 0x44, 0xd9, 0xbd, 0xd0, 0xa4, 0x87);
		
		/// <summary>
		/// Storage for TipoLetraItem
		/// </summary>
		private global::System.String tipoLetraItemPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TipoLetraItem domain property.
		/// Description for ce.GEB_NGN_PCR_Practica1.MenuItem.Tipo Letra Item
		/// </summary>
		[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.MenuItem/TipoLetraItem.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.MenuItem/TipoLetraItem.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("edc39d8d-8bbe-4e8e-b0f7-44d9bdd0a487")]
		public global::System.String TipoLetraItem
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tipoLetraItemPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TipoLetraItemPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MenuItem.TipoLetraItem domain property.
		/// </summary>
		internal sealed partial class TipoLetraItemPropertyHandler : DslModeling::DomainPropertyValueHandler<MenuItem, global::System.String>
		{
			private TipoLetraItemPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MenuItem.TipoLetraItem domain property value handler.
			/// </summary>
			public static readonly TipoLetraItemPropertyHandler Instance = new TipoLetraItemPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MenuItem.TipoLetraItem domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TipoLetraItemDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MenuItem element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tipoLetraItemPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MenuItem element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tipoLetraItemPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ColorLetraItem domain property code
		
		/// <summary>
		/// ColorLetraItem domain property Id.
		/// </summary>
		public static readonly global::System.Guid ColorLetraItemDomainPropertyId = new global::System.Guid(0xda80c161, 0x6443, 0x4bb9, 0x80, 0x8f, 0x64, 0xe0, 0x53, 0x7a, 0x7e, 0xb6);
		
		/// <summary>
		/// Storage for ColorLetraItem
		/// </summary>
		private global::System.String colorLetraItemPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ColorLetraItem domain property.
		/// Description for ce.GEB_NGN_PCR_Practica1.MenuItem.Color Letra Item
		/// </summary>
		[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.MenuItem/ColorLetraItem.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.MenuItem/ColorLetraItem.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("da80c161-6443-4bb9-808f-64e0537a7eb6")]
		public global::System.String ColorLetraItem
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return colorLetraItemPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ColorLetraItemPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MenuItem.ColorLetraItem domain property.
		/// </summary>
		internal sealed partial class ColorLetraItemPropertyHandler : DslModeling::DomainPropertyValueHandler<MenuItem, global::System.String>
		{
			private ColorLetraItemPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MenuItem.ColorLetraItem domain property value handler.
			/// </summary>
			public static readonly ColorLetraItemPropertyHandler Instance = new ColorLetraItemPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MenuItem.ColorLetraItem domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ColorLetraItemDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MenuItem element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.colorLetraItemPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MenuItem element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.colorLetraItemPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TamañoLetraItem domain property code
		
		/// <summary>
		/// TamañoLetraItem domain property Id.
		/// </summary>
		public static readonly global::System.Guid TamañoLetraItemDomainPropertyId = new global::System.Guid(0x2ea77d81, 0x5094, 0x4b8a, 0xbe, 0xd2, 0xf3, 0xa8, 0x1f, 0xf2, 0x2d, 0xde);
		
		/// <summary>
		/// Storage for TamañoLetraItem
		/// </summary>
		private global::System.Int16 tamañoLetraItemPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of TamañoLetraItem domain property.
		/// Description for ce.GEB_NGN_PCR_Practica1.MenuItem.Tamaño Letra Item
		/// </summary>
		[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.MenuItem/TamañoLetraItem.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.MenuItem/TamañoLetraItem.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2ea77d81-5094-4b8a-bed2-f3a81ff22dde")]
		public global::System.Int16 TamañoLetraItem
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tamañoLetraItemPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TamañoLetraItemPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MenuItem.TamañoLetraItem domain property.
		/// </summary>
		internal sealed partial class TamañoLetraItemPropertyHandler : DslModeling::DomainPropertyValueHandler<MenuItem, global::System.Int16>
		{
			private TamañoLetraItemPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MenuItem.TamañoLetraItem domain property value handler.
			/// </summary>
			public static readonly TamañoLetraItemPropertyHandler Instance = new TamañoLetraItemPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MenuItem.TamañoLetraItem domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TamañoLetraItemDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(MenuItem element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tamañoLetraItemPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MenuItem element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tamañoLetraItemPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Menu opposite domain role accessor
		/// <summary>
		/// Gets or sets Menu.
		/// Description for ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem.MenuItem
		/// </summary>
		public virtual Menu Menu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem.MenuItemDomainRoleId) as Menu;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem.MenuItemDomainRoleId, value);
			}
		}
		#endregion
	}
}
