//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace ce.GEB_NGN_PCR_Practica1
{
	/// <summary>
	/// DomainRelationship PrototoolsHasVentana
	/// Description for ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana
	/// </summary>
	[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1579b68b-8ef0-491f-972f-d8e60c3f2484")]
	public partial class PrototoolsHasVentana : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PrototoolsHasVentana domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1579b68b, 0x8ef0, 0x491f, 0x97, 0x2f, 0xd8, 0xe6, 0x0c, 0x3f, 0x24, 0x84);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PrototoolsHasVentana link in the same Partition as the given Prototools
		/// </summary>
		/// <param name="source">Prototools to use as the source of the relationship.</param>
		/// <param name="target">Ventana to use as the target of the relationship.</param>
		public PrototoolsHasVentana(Prototools source, Ventana target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PrototoolsHasVentana.PrototoolsDomainRoleId, source), new DslModeling::RoleAssignment(PrototoolsHasVentana.VentanaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PrototoolsHasVentana(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PrototoolsHasVentana(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PrototoolsHasVentana(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PrototoolsHasVentana(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Prototools domain role code
		
		/// <summary>
		/// Prototools domain role Id.
		/// </summary>
		public static readonly global::System.Guid PrototoolsDomainRoleId = new global::System.Guid(0x0c379363, 0xdeb6, 0x4f22, 0x8d, 0x4f, 0x03, 0x28, 0x3f, 0xbf, 0x75, 0xa7);
		
		/// <summary>
		/// DomainRole Prototools
		/// Description for ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana.Prototools
		/// </summary>
		[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana/Prototools.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana/Prototools.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Ventana", PropertyDisplayNameKey="ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana/Prototools.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0c379363-deb6-4f22-8d4f-03283fbf75a7")]
		public virtual Prototools Prototools
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Prototools)DslModeling::DomainRoleInfo.GetRolePlayer(this, PrototoolsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PrototoolsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Prototools of a Ventana
		/// <summary>
		/// Gets Prototools.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Prototools GetPrototools(Ventana element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, VentanaDomainRoleId) as Prototools;
		}
		
		/// <summary>
		/// Sets Prototools.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPrototools(Ventana element, Prototools newPrototools)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, VentanaDomainRoleId, newPrototools);
		}
		#endregion
		#region Ventana domain role code
		
		/// <summary>
		/// Ventana domain role Id.
		/// </summary>
		public static readonly global::System.Guid VentanaDomainRoleId = new global::System.Guid(0x859043b7, 0x7971, 0x485e, 0xa4, 0x83, 0xc6, 0x6f, 0x42, 0xaa, 0xbc, 0xde);
		
		/// <summary>
		/// DomainRole Ventana
		/// Description for ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana.Ventana
		/// </summary>
		[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana/Ventana.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana/Ventana.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Prototools", PropertyDisplayNameKey="ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana/Ventana.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("859043b7-7971-485e-a483-c66f42aabcde")]
		public virtual Ventana Ventana
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Ventana)DslModeling::DomainRoleInfo.GetRolePlayer(this, VentanaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VentanaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Ventana of a Prototools
		/// <summary>
		/// Gets a list of Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Ventana> GetVentana(Prototools element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Ventana>, Ventana>(element, PrototoolsDomainRoleId);
		}
		#endregion
		#region Prototools link accessor
		/// <summary>
		/// Get the list of PrototoolsHasVentana links to a Prototools.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana> GetLinksToVentana ( global::ce.GEB_NGN_PCR_Practica1.Prototools prototoolsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana>(prototoolsInstance, global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana.PrototoolsDomainRoleId);
		}
		#endregion
		#region Ventana link accessor
		/// <summary>
		/// Get the PrototoolsHasVentana link to a Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana GetLinkToPrototools (global::ce.GEB_NGN_PCR_Practica1.Ventana ventanaInstance)
		{
			global::System.Collections.Generic.IList<global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana>(ventanaInstance, global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana.VentanaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Ventana not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PrototoolsHasVentana instance accessors
		
		/// <summary>
		/// Get any PrototoolsHasVentana links between a given Prototools and a Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana> GetLinks( global::ce.GEB_NGN_PCR_Practica1.Prototools source, global::ce.GEB_NGN_PCR_Practica1.Ventana target )
		{
			global::System.Collections.Generic.List<global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana> outLinks = new global::System.Collections.Generic.List<global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana>();
			global::System.Collections.Generic.IList<global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana>(source, global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana.PrototoolsDomainRoleId);
			foreach ( global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana link in links )
			{
				if ( target.Equals(link.Ventana) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PrototoolsHasVentana link between a given Prototoolsand a Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana GetLink( global::ce.GEB_NGN_PCR_Practica1.Prototools source, global::ce.GEB_NGN_PCR_Practica1.Ventana target )
		{
			global::System.Collections.Generic.IList<global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana>(source, global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana.PrototoolsDomainRoleId);
			foreach ( global::ce.GEB_NGN_PCR_Practica1.PrototoolsHasVentana link in links )
			{
				if ( target.Equals(link.Ventana) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ce.GEB_NGN_PCR_Practica1
{
	/// <summary>
	/// DomainRelationship MenuHasMenuItem
	/// Description for ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem
	/// </summary>
	[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("494f1412-5868-4fd6-9407-769a03347791")]
	public partial class MenuHasMenuItem : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MenuHasMenuItem domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x494f1412, 0x5868, 0x4fd6, 0x94, 0x07, 0x76, 0x9a, 0x03, 0x34, 0x77, 0x91);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MenuHasMenuItem link in the same Partition as the given Menu
		/// </summary>
		/// <param name="source">Menu to use as the source of the relationship.</param>
		/// <param name="target">MenuItem to use as the target of the relationship.</param>
		public MenuHasMenuItem(Menu source, MenuItem target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MenuHasMenuItem.MenuDomainRoleId, source), new DslModeling::RoleAssignment(MenuHasMenuItem.MenuItemDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MenuHasMenuItem(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MenuHasMenuItem(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MenuHasMenuItem(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MenuHasMenuItem(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Menu domain role code
		
		/// <summary>
		/// Menu domain role Id.
		/// </summary>
		public static readonly global::System.Guid MenuDomainRoleId = new global::System.Guid(0x4c2d99da, 0x6298, 0x47d8, 0xa1, 0x3b, 0x8c, 0xff, 0x27, 0x86, 0x9e, 0xda);
		
		/// <summary>
		/// DomainRole Menu
		/// Description for ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem.Menu
		/// </summary>
		[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem/Menu.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem/Menu.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MenuItem", PropertyDisplayNameKey="ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem/Menu.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4c2d99da-6298-47d8-a13b-8cff27869eda")]
		public virtual Menu Menu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Menu)DslModeling::DomainRoleInfo.GetRolePlayer(this, MenuDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MenuDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Menu of a MenuItem
		/// <summary>
		/// Gets Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Menu GetMenu(MenuItem element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MenuItemDomainRoleId) as Menu;
		}
		
		/// <summary>
		/// Sets Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMenu(MenuItem element, Menu newMenu)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MenuItemDomainRoleId, newMenu);
		}
		#endregion
		#region MenuItem domain role code
		
		/// <summary>
		/// MenuItem domain role Id.
		/// </summary>
		public static readonly global::System.Guid MenuItemDomainRoleId = new global::System.Guid(0xccb2d2b2, 0x8a83, 0x421e, 0x89, 0xaf, 0x4d, 0x4f, 0xce, 0xaf, 0xb4, 0xb0);
		
		/// <summary>
		/// DomainRole MenuItem
		/// Description for ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem.MenuItem
		/// </summary>
		[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem/MenuItem.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem/MenuItem.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Menu", PropertyDisplayNameKey="ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem/MenuItem.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ccb2d2b2-8a83-421e-89af-4d4fceafb4b0")]
		public virtual MenuItem MenuItem
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MenuItem)DslModeling::DomainRoleInfo.GetRolePlayer(this, MenuItemDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MenuItemDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MenuItem of a Menu
		/// <summary>
		/// Gets a list of MenuItem.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MenuItem> GetMenuItem(Menu element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MenuItem>, MenuItem>(element, MenuDomainRoleId);
		}
		#endregion
		#region Menu link accessor
		/// <summary>
		/// Get the list of MenuHasMenuItem links to a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem> GetLinksToMenuItem ( global::ce.GEB_NGN_PCR_Practica1.Menu menuInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem>(menuInstance, global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem.MenuDomainRoleId);
		}
		#endregion
		#region MenuItem link accessor
		/// <summary>
		/// Get the MenuHasMenuItem link to a MenuItem.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem GetLinkToMenu (global::ce.GEB_NGN_PCR_Practica1.MenuItem menuItemInstance)
		{
			global::System.Collections.Generic.IList<global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem>(menuItemInstance, global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem.MenuItemDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MenuItem not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MenuHasMenuItem instance accessors
		
		/// <summary>
		/// Get any MenuHasMenuItem links between a given Menu and a MenuItem.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem> GetLinks( global::ce.GEB_NGN_PCR_Practica1.Menu source, global::ce.GEB_NGN_PCR_Practica1.MenuItem target )
		{
			global::System.Collections.Generic.List<global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem> outLinks = new global::System.Collections.Generic.List<global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem>();
			global::System.Collections.Generic.IList<global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem>(source, global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem.MenuDomainRoleId);
			foreach ( global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem link in links )
			{
				if ( target.Equals(link.MenuItem) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MenuHasMenuItem link between a given Menuand a MenuItem.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem GetLink( global::ce.GEB_NGN_PCR_Practica1.Menu source, global::ce.GEB_NGN_PCR_Practica1.MenuItem target )
		{
			global::System.Collections.Generic.IList<global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem>(source, global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem.MenuDomainRoleId);
			foreach ( global::ce.GEB_NGN_PCR_Practica1.MenuHasMenuItem link in links )
			{
				if ( target.Equals(link.MenuItem) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace ce.GEB_NGN_PCR_Practica1
{
	/// <summary>
	/// DomainRelationship VentanaHasMenu
	/// Description for ce.GEB_NGN_PCR_Practica1.VentanaHasMenu
	/// </summary>
	[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.VentanaHasMenu.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.VentanaHasMenu.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("04e40001-c9d7-45e2-8ea2-13be2f6056d4")]
	public partial class VentanaHasMenu : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// VentanaHasMenu domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x04e40001, 0xc9d7, 0x45e2, 0x8e, 0xa2, 0x13, 0xbe, 0x2f, 0x60, 0x56, 0xd4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a VentanaHasMenu link in the same Partition as the given Ventana
		/// </summary>
		/// <param name="source">Ventana to use as the source of the relationship.</param>
		/// <param name="target">Menu to use as the target of the relationship.</param>
		public VentanaHasMenu(Ventana source, Menu target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(VentanaHasMenu.VentanaDomainRoleId, source), new DslModeling::RoleAssignment(VentanaHasMenu.MenuDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public VentanaHasMenu(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public VentanaHasMenu(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public VentanaHasMenu(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public VentanaHasMenu(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Ventana domain role code
		
		/// <summary>
		/// Ventana domain role Id.
		/// </summary>
		public static readonly global::System.Guid VentanaDomainRoleId = new global::System.Guid(0x227df8d1, 0xf1d9, 0x45e4, 0xbf, 0xb1, 0xdd, 0xa6, 0x70, 0x05, 0xe1, 0x0c);
		
		/// <summary>
		/// DomainRole Ventana
		/// Description for ce.GEB_NGN_PCR_Practica1.VentanaHasMenu.Ventana
		/// </summary>
		[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.VentanaHasMenu/Ventana.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.VentanaHasMenu/Ventana.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Menu", PropertyDisplayNameKey="ce.GEB_NGN_PCR_Practica1.VentanaHasMenu/Ventana.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("227df8d1-f1d9-45e4-bfb1-dda67005e10c")]
		public virtual Ventana Ventana
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Ventana)DslModeling::DomainRoleInfo.GetRolePlayer(this, VentanaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VentanaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Ventana of a Menu
		/// <summary>
		/// Gets Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Ventana GetVentana(Menu element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MenuDomainRoleId) as Ventana;
		}
		
		/// <summary>
		/// Sets Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetVentana(Menu element, Ventana newVentana)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MenuDomainRoleId, newVentana);
		}
		#endregion
		#region Menu domain role code
		
		/// <summary>
		/// Menu domain role Id.
		/// </summary>
		public static readonly global::System.Guid MenuDomainRoleId = new global::System.Guid(0x7d6ac4b1, 0x38eb, 0x4b4c, 0x9c, 0x1a, 0x27, 0xc2, 0x7c, 0xa1, 0x3a, 0x3b);
		
		/// <summary>
		/// DomainRole Menu
		/// Description for ce.GEB_NGN_PCR_Practica1.VentanaHasMenu.Menu
		/// </summary>
		[DslDesign::DisplayNameResource("ce.GEB_NGN_PCR_Practica1.VentanaHasMenu/Menu.DisplayName", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("ce.GEB_NGN_PCR_Practica1.VentanaHasMenu/Menu.Description", typeof(global::ce.GEB_NGN_PCR_Practica1.GEB_NGN_PCR_Practica1DomainModel), "ce.GEB_NGN_PCR_Practica1.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Ventana", PropertyDisplayNameKey="ce.GEB_NGN_PCR_Practica1.VentanaHasMenu/Menu.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7d6ac4b1-38eb-4b4c-9c1a-27c27ca13a3b")]
		public virtual Menu Menu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Menu)DslModeling::DomainRoleInfo.GetRolePlayer(this, MenuDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MenuDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Menu of a Ventana
		/// <summary>
		/// Gets a list of Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Menu> GetMenu(Ventana element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Menu>, Menu>(element, VentanaDomainRoleId);
		}
		#endregion
		#region Ventana link accessor
		/// <summary>
		/// Get the list of VentanaHasMenu links to a Ventana.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu> GetLinksToMenu ( global::ce.GEB_NGN_PCR_Practica1.Ventana ventanaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu>(ventanaInstance, global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu.VentanaDomainRoleId);
		}
		#endregion
		#region Menu link accessor
		/// <summary>
		/// Get the VentanaHasMenu link to a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu GetLinkToVentana (global::ce.GEB_NGN_PCR_Practica1.Menu menuInstance)
		{
			global::System.Collections.Generic.IList<global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu>(menuInstance, global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu.MenuDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Menu not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region VentanaHasMenu instance accessors
		
		/// <summary>
		/// Get any VentanaHasMenu links between a given Ventana and a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu> GetLinks( global::ce.GEB_NGN_PCR_Practica1.Ventana source, global::ce.GEB_NGN_PCR_Practica1.Menu target )
		{
			global::System.Collections.Generic.List<global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu> outLinks = new global::System.Collections.Generic.List<global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu>();
			global::System.Collections.Generic.IList<global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu>(source, global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu.VentanaDomainRoleId);
			foreach ( global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu link in links )
			{
				if ( target.Equals(link.Menu) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one VentanaHasMenu link between a given Ventanaand a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu GetLink( global::ce.GEB_NGN_PCR_Practica1.Ventana source, global::ce.GEB_NGN_PCR_Practica1.Menu target )
		{
			global::System.Collections.Generic.IList<global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu> links = DslModeling::DomainRoleInfo.GetElementLinks<global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu>(source, global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu.VentanaDomainRoleId);
			foreach ( global::ce.GEB_NGN_PCR_Practica1.VentanaHasMenu link in links )
			{
				if ( target.Equals(link.Menu) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
